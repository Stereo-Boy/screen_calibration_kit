% test_gamma()
%
% This script check whether luminance asked is equal to luminance obtained after gamma correction
%
% Pre-requisites:
%   - Psychtoolbox (http://psychtoolbox.org/)
%   - Function folder containing shared functions
%   - Gamma correction tables for left and right screens
%
% Instructions:
%   1. Make sure the file params.mat is in gamma folder (generated by params.m) and contain the gamma lookup tables as obtained with PsychCal function
%   2. Run the script after setting up your photometer
%   3. Measure luminance for each background displayed - write it down
%   4. Enter values when prompted and see figure
%   5. Repeat for the other screen
% Author: Adrien Chopin
% Date: 2023

%first define everything in the way we normally do in the experiment (minimal version)
% Initialize experiment parameters and paths
clc; HideCursor(); clear all;
expe.eyeTrackingMode= 0;
expe.rootPath=fileparts(mfilename('fullpath')); %path to folder where code is located
expe.gammapath = fullfile(expe.rootPath,'gamma'); % path to the screen folder values
KbName('UnifyKeyNames');
expe.space = KbName('space');
expe.escape = KbName('ESCAPE');

% set color and luminance variables
scr.black = BlackIndex(1);
scr.white = WhiteIndex(1);
scr.gray = GrayIndex(1); %background
scr.red = [scr.white scr.black scr.black];
scr.blue = [scr.black scr.black scr.white];
scr.stereoMode = 10;  % set stereoMode for dual monitor setup

% Load gamma tables for left and right screens
load(fullfile(expe.gammapath,'params.mat'));
Screen('LoadNormalizedGammaTable', 1, gammaTable_LE*[1 1 1]); clear gammaTable;
Screen('LoadNormalizedGammaTable', 2, gammaTable_RE*[1 1 1]);

screenNb = input('Which screen do you want to check? (1: left, 2: right)');
if screenNb==1
    minLum = min_lum_LE;
    maxLum = max_lum_LE;
else
    minLum = min_lum_RE;
    maxLum = max_lum_RE;
end

% open screen windows

Screen('Preference', 'SkipSyncTests', 1);
scr.w = PsychImaging('OpenWindow', 1, scr.gray, [], [], [], scr.stereoMode);
Screen('OpenWindow', 2, scr.gray, [], [], [], scr.stereoMode);
Screen('BlendFunction', scr.w, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA');

% % Measure luminance levels for black, (gray,) and white
% showBinoBlankScreenNoFlip(scr.w, scr.black);
% showBinoText(scr.w, 'black\n\n\n\n\n\n\n\n\n\n\n', scr.white);
% keypressed=wait4spaceKeyPress(expe, scr); WaitSecs(0.25); if keypressed==expe.escape; return; end
% % showBinoBlankScreenNoFlip(scr.w, scr.gray);
% % showBinoText(scr.w, 'gray\n\n\n\n\n\n\n\n\n\n\n', scr.black);
% % keypressed=wait4spaceKeyPress(expe, scr); WaitSecs(0.25); if keypressed==expe.escape; return; end
% showBinoBlankScreenNoFlip(scr.w, scr.white);
% showBinoText(scr.w, 'white\n\n\n\n\n\n\n\n\n\n\n', scr.black);
% keypressed=wait4spaceKeyPress(expe, scr); WaitSecs(0.25); if keypressed==expe.escape; return; end
% 
% % Input measured luminance values for black and white (min and max lum)
% sca; ShowCursor();

% show specific luminance background in 10 steps
%scr.w = PsychImaging('OpenWindow', 1, scr.gray, [], [], [], scr.stereoMode);
%Screen('OpenWindow', 2, scr.gray, [], [], [], scr.stereoMode);
HideCursor();
nSteps = 10;
stepLum = (maxLum-minLum)/nSteps; % value of a step
lum = minLum; % luminance to show
for i=1:(nSteps+1)
    clut = round((lum-minLum)*255/(maxLum-minLum));
    storedLum(i)= lum;
    Screen('SelectStereoDrawBuffer', scr.w, 1);
    Screen('FillRect',scr.w, round((lum-minLum)*255/(maxLum-minLum)));
    Screen('SelectStereoDrawBuffer', scr.w, 0);
    Screen('FillRect',scr.w, round((lum-minLum)*255/(maxLum-minLum)));
    showBinoText(scr.w, [num2str(lum),'\n\n\n\n\n\n\n\n\n\n\n'], scr.black);
    keypressed=wait4spaceKeyPress(expe, scr); WaitSecs(0.25); if keypressed==expe.escape; return; end
    lum = lum + stepLum;
end
sca;    ShowCursor();

% input measured values
disp('Now enter the luminances that you measured in the right order')
for i=1:(nSteps+1)
    measuredLum(i) = input('What luminance did you measure? ');
end
plot(1:(nSteps+1),storedLum,'-k'); hold on;
plot(1:(nSteps+1),measuredLum,'or');

%quit on keyboard mode just in case
keyboard


